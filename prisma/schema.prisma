generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model users {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  username   String   @unique
  password   String
  bio        String?
  avatar     String?  @default("https://www.shutterstock.com/image-vector/avatar-photo-default-user-icon-600nw-2345549599.jpg")
  last_login DateTime
  created_at DateTime

  //Relations
  posts           posts[]          @relation("UserPosts")
  comments        comments[]       @relation("UserComments")
  likes           likes[]          @relation("UserLikes")
  following       follows[]        @relation("Following")
  followers       follows[]        @relation("Followers")
  post_bookmarked post_bookmarks[] @relation("UserBookmarkedPosts")
}

model posts {
  id        Int      @id @default(autoincrement())
  user_id   Int
  unique_id String?
  caption   String
  timestamp DateTime

  //Relations
  user      users            @relation("UserPosts", fields: [user_id], onDelete: Cascade, references: [id])
  media     post_media[]     @relation("PostMedia")
  likes     likes[]          @relation("PostLikes")
  comments  comments[]       @relation("PostComments")
  bookmarks post_bookmarks[] @relation("PostBookmarked")
}

model post_media {
  id        Int      @id @default(autoincrement())
  post_id   Int
  link_url  String
  timestamp DateTime

  //Relations
  post posts @relation("PostMedia", fields: [post_id], onDelete: Cascade, references: [id])
}

model comments {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int
  content   String
  timestamp DateTime

  //Relations
  post posts @relation("PostComments", fields: [post_id], onDelete: Cascade, references: [id])
  user users @relation("UserComments", fields: [user_id], onDelete: Cascade, references: [id])
}

model likes {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int
  timestamp DateTime

  //Relations
  user users @relation("UserLikes", fields: [user_id], onDelete: Cascade, references: [id])
  post posts @relation("PostLikes", fields: [post_id], onDelete: Cascade, references: [id])
}

model follows {
  id                Int      @id @default(autoincrement())
  following_user_id Int
  followed_user_id  Int
  created_at        DateTime

  //Relations
  following_user users @relation("Following", fields: [following_user_id], references: [id])
  followed_user  users @relation("Followers", fields: [followed_user_id], references: [id])
}

model post_bookmarks {
  id        Int      @id @default(autoincrement())
  post_id   Int
  user_id   Int
  timestamp DateTime

  //Relations
  user users @relation("UserBookmarkedPosts", fields: [user_id], onDelete: Cascade, references: [id])
  post posts @relation("PostBookmarked", fields: [post_id], onDelete: Cascade, references: [id])
}
